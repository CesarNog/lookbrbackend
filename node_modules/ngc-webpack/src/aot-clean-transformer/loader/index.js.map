{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/aot-clean-transformer/loader/index.ts"],"names":[],"mappings":";;AAEA,yDAA2E;AAC3E,uEAAyF;AAEzF,IAAI,mBAA4B,CAAC;AAEjC,mCAA0C,KAAc;IACtD,mBAAmB,GAAG,KAAK,CAAC;AAC9B,CAAC;AAFD,8DAEC;AAED,wBAAsF,MAAqB,EAAE,SAAwB;IACnI,EAAE,CAAC,CAAC,mBAAmB,KAAK,IAAI,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,yCAAyB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IACjE,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,kCAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IAC1D,CAAC;AACH,CAAC;AAND,iCAMC","sourcesContent":["import { loader as l } from 'webpack';\n\nimport { aotCleanLoader as aotCleanLoaderText } from './text-based-loader';\nimport { aotCleanLoader as aotCleanLoaderTransformer } from './transformer-based-loader';\n\nlet useTransformerBased: boolean;\n\nexport function useTransformerBasedLoader(value: boolean): void {\n  useTransformerBased = value;\n}\n\nexport default function aotCleanLoader(this: l.LoaderContext & { _compilation: any }, source: string | null, sourceMap: string | null) {\n  if (useTransformerBased === true) {\n    return aotCleanLoaderTransformer.call(this, source, sourceMap);\n  } else {\n    return aotCleanLoaderText.call(this, source, sourceMap);\n  }\n}"]}