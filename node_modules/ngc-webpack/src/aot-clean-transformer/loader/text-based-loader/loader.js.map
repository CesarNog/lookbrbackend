{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../../src/aot-clean-transformer/loader/text-based-loader/loader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as ts from 'typescript';\nimport { loader as l } from 'webpack';\nconst loaderUtils = require('loader-utils');\n\nimport { TypeScriptFileRefactor } from './refactor';\nimport { findPlugin } from '../../../webpack-wrapper';\n\nfunction _angularImportsFromNode(node: ts.ImportDeclaration, _sourceFile: ts.SourceFile): string[] {\n  const ms = node.moduleSpecifier;\n  let modulePath: string | null = null;\n  switch (ms.kind) {\n    case ts.SyntaxKind.StringLiteral:\n      modulePath = (ms as ts.StringLiteral).text;\n      break;\n    default:\n      return [];\n  }\n\n  if (!modulePath.startsWith('@angular/')) {\n    return [];\n  }\n\n  if (node.importClause) {\n    if (node.importClause.name) {\n      // This is of the form `import Name from 'path'`. Ignore.\n      return [];\n    } else if (node.importClause.namedBindings) {\n      const nb = node.importClause.namedBindings;\n      if (nb.kind == ts.SyntaxKind.NamespaceImport) {\n        // This is of the form `import * as name from 'path'`. Return `name.`.\n        return [(nb as ts.NamespaceImport).name.text + '.'];\n      } else {\n        // This is of the form `import {a,b,c} from 'path'`\n        const namedImports = nb as ts.NamedImports;\n\n        return namedImports.elements\n          .map((is: ts.ImportSpecifier) => is.propertyName ? is.propertyName.text : is.name.text);\n      }\n    }\n  } else {\n    // This is of the form `import 'path';`. Nothing to do.\n    return [];\n  }\n}\n\n\nfunction _ctorParameterFromTypeReference(paramNode: ts.ParameterDeclaration,\n                                         angularImports: string[],\n                                         refactor: TypeScriptFileRefactor) {\n  let typeName = 'undefined';\n  if (paramNode.type) {\n    switch (paramNode.type.kind) {\n      case ts.SyntaxKind.TypeReference:\n        const type = paramNode.type as ts.TypeReferenceNode;\n\n        const tsType = refactor.program.getTypeChecker().getTypeFromTypeNode(type);\n        if (tsType.symbol.flags & ts.SymbolFlags.Interface\n          || tsType.symbol.flags & ts.SymbolFlags.TypeAlias\n          || tsType.symbol.flags & ts.SymbolFlags.TypeLiteral) {\n          typeName = 'Object';\n        } else if (type.typeName) {\n          typeName = type.typeName.getText(refactor.sourceFile);\n        } else {\n          typeName = type.getText(refactor.sourceFile);\n        }\n        break;\n      case ts.SyntaxKind.AnyKeyword:\n        typeName = 'undefined';\n        break;\n      default:\n        typeName = 'null';\n    }\n  }\n\n  const decorators = refactor.findAstNodes(paramNode, ts.SyntaxKind.Decorator) as ts.Decorator[];\n  const decoratorStr = decorators\n    .map(decorator => {\n      const call =\n        refactor.findFirstAstNode(decorator, ts.SyntaxKind.CallExpression) as ts.CallExpression;\n\n      if (!call) {\n        return null;\n      }\n\n      const fnName = call.expression.getText(refactor.sourceFile);\n      const args = call.arguments.map(x => x.getText(refactor.sourceFile)).join(', ');\n      if (angularImports.indexOf(fnName) === -1) {\n        return null;\n      } else {\n        return [fnName, args];\n      }\n    })\n    .filter(x => !!x)\n    .map(([name, args]: string[]) => {\n      if (args) {\n        return `{ type: ${name}, args: [${args}] }`;\n      }\n      return `{ type: ${name} }`;\n    })\n    .join(', ');\n\n  if (decorators.length > 0) {\n    return `{ type: ${typeName}, decorators: [${decoratorStr}] }`;\n  }\n  return `{ type: ${typeName} }`;\n}\n\n\nfunction _addCtorParameters(classNode: ts.ClassDeclaration,\n                            angularImports: string[],\n                            refactor: TypeScriptFileRefactor) {\n  // For every classes with constructors, output the ctorParameters function which contains a list\n  // of injectable types.\n  const ctor = (\n    refactor.findFirstAstNode(classNode, ts.SyntaxKind.Constructor) as ts.ConstructorDeclaration);\n  if (!ctor) {\n    // A class can be missing a constructor, and that's _okay_.\n    return;\n  }\n\n  const params = Array.from(ctor.parameters).map(paramNode => {\n    return _ctorParameterFromTypeReference(paramNode, angularImports, refactor);\n  });\n\n  // Type script will complain if extending class static's ctorParameters method does not match parent\n  if (classNode.heritageClauses && classNode.heritageClauses.some( hc => hc.token === ts.SyntaxKind.ExtendsKeyword)) {\n    const ctorParametersDecl = `(${classNode.name.text} as any).ctorParameters = function () { return [ ${params.join(', ')} ]; }`;\n    refactor.appendAfter(classNode.getLastToken(refactor.sourceFile), ctorParametersDecl);\n  } else {\n    const ctorParametersDecl = `static ctorParameters() { return [ ${params.join(', ')} ]; }`;\n    refactor.prependBefore(classNode.getLastToken(refactor.sourceFile), ctorParametersDecl);\n  }\n}\n\n\nfunction _removeDecorators(refactor: TypeScriptFileRefactor) {\n  const angularImports: string[]\n    = refactor.findAstNodes(refactor.sourceFile, ts.SyntaxKind.ImportDeclaration)\n    .map((node: ts.ImportDeclaration) => _angularImportsFromNode(node, refactor.sourceFile))\n    .reduce((acc: string[], current: string[]) => acc.concat(current), []);\n\n  const marker = [];\n\n  // Find all decorators.\n  refactor.findAstNodes(refactor.sourceFile, ts.SyntaxKind.Decorator)\n    .forEach(node => {\n      // First, add decorators to classes to the classes array.\n      if (node.parent) {\n        const declarations = refactor.findAstNodes(node.parent,\n          ts.SyntaxKind.ClassDeclaration, false, 1);\n        if (declarations.length > 0 && marker.indexOf(declarations[0]) === -1) {\n          marker.push(declarations[0]);\n          _addCtorParameters(declarations[0] as ts.ClassDeclaration, angularImports, refactor);\n        }\n      }\n\n      refactor.findAstNodes(node, ts.SyntaxKind.CallExpression)\n        .filter((node: ts.CallExpression) => {\n          const fnName = node.expression.getText(refactor.sourceFile);\n          if (fnName.indexOf('.') != -1) {\n            // Since this is `a.b`, see if it's the same namespace as a namespace import.\n            return angularImports.indexOf(fnName.replace(/\\..*$/, '') + '.') != -1;\n          } else {\n            return angularImports.indexOf(fnName) != -1;\n          }\n        })\n        .forEach(() => refactor.removeNode(node));\n    });\n}\n\nfunction getDiagnostics(program: ts.Program, sourceFile: ts.SourceFile, typeCheck = true): ts.Diagnostic[] {\n  let diagnostics: ts.Diagnostic[] = [];\n  // only concat the declaration diagnostics if the tsconfig config sets it to true.\n\n  diagnostics = diagnostics.concat(program.getOptionsDiagnostics());\n\n  diagnostics = diagnostics.concat(program.getGlobalDiagnostics());\n\n  if (program.getCompilerOptions().declaration == true) {\n    diagnostics = diagnostics.concat(program.getDeclarationDiagnostics(sourceFile));\n  }\n\n  diagnostics = diagnostics.concat(\n    program.getSyntacticDiagnostics(sourceFile),\n    typeCheck ? program.getSemanticDiagnostics(sourceFile) : []);\n\n  return diagnostics;\n}\n\nlet program: ts.Program;\nlet compilerHost: ts.CompilerHost;\nlet AOTMode: boolean;\n\nexport interface AotCleanupLoaderOptions {\n  /**\n   * If false the plugin is a ghost, it will not perform any action.\n   * This property can be used to trigger AOT on/off depending on your build target (prod, staging etc...)\n   *\n   * The state can not change after initializing the plugin.\n   * @default true\n   */\n  disable?: false;\n\n  /**\n   * A path to a TSConfig file, optional if a plugin is supplied.\n   * When both are available `tsConfigPath` wins.\n   */\n  tsConfigPath?: any;\n\n  /**\n   * Optional TS compiler options.\n   *\n   * > Some options set by the loader can not change.\n   */\n  compilerOptions?: any;\n}\n\n/**\n * Reset the loader, allows running a new program on the same session.\n * @internal\n */\nexport function resetLoader(): void {\n  program = compilerHost = AOTMode = undefined;\n}\n\nexport function aotCleanLoader(this: l.LoaderContext & { _compilation: any }, source: string | null, sourceMap: string | null) {\n  const cb = this.async();\n  const sourceFileName: string = this.resourcePath;\n\n  if (AOTMode === false || sourceFileName.endsWith('ngfactory.ts')) {\n    return cb(null, source, sourceMap);\n  }\n\n  if (!program) {\n    try {\n      const self = this;\n      const plugin = findPlugin(self._compilation);\n      const options: AotCleanupLoaderOptions = loaderUtils.getOptions(this) || {};\n\n      if (options.disable === false) {\n        AOTMode = true;\n      } else {\n        AOTMode = false;\n        return cb(null, source, sourceMap);\n      }\n\n      let tsConfigPath: string = options.tsConfigPath;\n\n      if (!tsConfigPath && plugin) {\n        tsConfigPath = plugin.options.tsConfig;\n      }\n\n      if (tsConfigPath === undefined) {\n        throw new Error('aot-transformer is being used as a loader but no `tsConfigPath` option nor '\n          + 'NgcWebpackPlugin was detected. You must provide at least one of these.'\n        );\n      }\n\n      const tsConfig = ts.readConfigFile(tsConfigPath, ts.sys.readFile);\n      if (tsConfig.error) {\n        throw tsConfig.error;\n      }\n\n      for (const key of Object.keys(options)) {\n        if (key == 'tsConfigPath') {\n          continue;\n        }\n        tsConfig.config.compilerOptions[key] = options[key];\n      }\n\n      tsConfig.config.compilerOptions.strictNullChecks = false;\n      tsConfig.config.compilerOptions.declaration = false;\n      tsConfig.config.compilerOptions.diagnostics = false;\n      tsConfig.config.compilerOptions.noEmit = true;\n      tsConfig.config.compilerOptions.skipLibCheck = true;\n\n      const parsedConfig = ts.parseJsonConfigFileContent(tsConfig.config, ts.sys, Path.dirname(tsConfigPath));\n\n      compilerHost = ts.createCompilerHost(parsedConfig.options);\n      program = ts.createProgram(parsedConfig.fileNames, parsedConfig.options);\n    } catch (err) {\n      return cb(err);\n    }\n  }\n\n  program.emit(program.getSourceFile(sourceFileName), <any> (()=>{}) );\n\n  const diagnostics = getDiagnostics(program, program.getSourceFile(sourceFileName));\n  if (diagnostics.length >= 1) {\n    const errors = diagnosticsToErrors(diagnostics);\n    if (errors.length === 1) {\n      cb(errors[0]);\n    } else {\n      for (let e of errors) {\n        this.emitError(<any>e);\n      }\n      cb(new Error('NgcWebpack AotCleanupLoader: Multiple Errors'));\n    }\n  } else {\n    try {\n      const refactor = new TypeScriptFileRefactor(sourceFileName, program.getCompilerOptions(), <any>compilerHost, <any>program, source);\n      _removeDecorators(refactor);\n      cb(null, refactor.sourceText);\n    } catch (err) {\n      cb(err);\n    }\n  }\n}\n\nfunction diagnosticsToErrors(diagnostics: ts.Diagnostic[]): Error[] {\n  const errors: Error[] = [];\n  diagnostics.forEach( d => {\n    const msg = d.messageText;\n    if (typeof msg === 'string') {\n      errors.push(new Error(msg));\n    } else {\n      let chain: ts.DiagnosticMessageChain = <any>d;\n      while (chain) {\n        if (chain.category = ts.DiagnosticCategory.Error) {\n          errors.push(new Error(chain.messageText));\n        }\n        chain = chain.next;\n      }\n    }\n  });\n  return errors;\n}\n"]}