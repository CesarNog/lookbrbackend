{"version":3,"file":"refactor.js","sourceRoot":"","sources":["../../../../../src/aot-clean-transformer/loader/text-based-loader/refactor.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: move this in its own package.\nimport * as path from 'path';\nimport * as ts from 'typescript';\nimport {SourceMapConsumer, SourceMapGenerator} from 'source-map';\n\nconst MagicString = require('magic-string');\n\n\nexport interface TranspileOutput {\n  outputText: string;\n  sourceMap: any | null;\n}\n\n\nfunction resolve(filePath: string, compilerOptions: ts.CompilerOptions) {\n  if (path.isAbsolute(filePath)) {\n    return filePath;\n  }\n  const basePath = compilerOptions.baseUrl || compilerOptions.rootDir;\n  if (!basePath) {\n    throw new Error(`Trying to resolve '${filePath}' without a basePath.`);\n  }\n  return path.join(basePath, filePath);\n}\n\n\nexport class TypeScriptFileRefactor {\n  private _fileName: string;\n  private _sourceFile: ts.SourceFile;\n  private _sourceString: any;\n  private _sourceText: string;\n  private _changed = false;\n\n  get fileName() { return this._fileName; }\n  get sourceFile() { return this._sourceFile; }\n  get sourceText() { return this._sourceString.toString(); }\n\n  constructor(fileName: string,\n              compilerOptions: ts.CompilerOptions,\n              public host: ts.CompilerHost,\n              public program: ts.Program,\n              source?: string | null) {\n    this._fileName = fileName = resolve(fileName, compilerOptions).replace(/\\\\/g, '/');\n\n    if (program) {\n      this._sourceFile = program.getSourceFile(fileName);\n    }\n\n    if (!this._sourceFile && host.fileExists(fileName)) {\n      this._sourceFile = ts.createSourceFile(fileName, host.readFile(fileName), ts.ScriptTarget.Latest, true);\n    }\n\n    this._sourceText = this._sourceFile.getFullText(this._sourceFile);\n    this._sourceString = new MagicString(this._sourceText);\n  }\n\n  /**\n   * Collates the diagnostic messages for the current source file\n   */\n  getDiagnostics(typeCheck = true): ts.Diagnostic[] {\n    if (!this.program) {\n      return [];\n    }\n    let diagnostics: ts.Diagnostic[] = [];\n    // only concat the declaration diagnostics if the tsconfig config sets it to true.\n    if (this.program.getCompilerOptions().declaration == true) {\n      diagnostics = diagnostics.concat(this.program.getDeclarationDiagnostics(this._sourceFile));\n    }\n    diagnostics = diagnostics.concat(\n      this.program.getSyntacticDiagnostics(this._sourceFile),\n      typeCheck ? this.program.getSemanticDiagnostics(this._sourceFile) : []);\n\n    return diagnostics;\n  }\n\n  /**\n   * Find all nodes from the AST in the subtree of node of SyntaxKind kind.\n   * @param node The root node to check, or null if the whole tree should be searched.\n   * @param kind The kind of nodes to find.\n   * @param recursive Whether to go in matched nodes to keep matching.\n   * @param max The maximum number of items to return.\n   * @return all nodes of kind, or [] if none is found\n   */\n  findAstNodes(node: ts.Node | null,\n               kind: ts.SyntaxKind,\n               recursive = false,\n               max: number = Infinity): ts.Node[] {\n    if (max == 0) {\n      return [];\n    }\n    if (!node) {\n      node = this._sourceFile;\n    }\n\n    let arr: ts.Node[] = [];\n    if (node.kind === kind) {\n      // If we're not recursively looking for children, stop here.\n      if (!recursive) {\n        return [node];\n      }\n\n      arr.push(node);\n      max--;\n    }\n\n    if (max > 0) {\n      for (const child of node.getChildren(this._sourceFile)) {\n        this.findAstNodes(child, kind, recursive, max)\n          .forEach((node: ts.Node) => {\n            if (max > 0) {\n              arr.push(node);\n            }\n            max--;\n          });\n\n        if (max <= 0) {\n          break;\n        }\n      }\n    }\n    return arr;\n  }\n\n  findFirstAstNode(node: ts.Node | null, kind: ts.SyntaxKind): ts.Node | null {\n    return this.findAstNodes(node, kind, false, 1)[0] || null;\n  }\n\n  appendAfter(node: ts.Node, text: string): void {\n    this._sourceString.appendRight(node.getEnd(), text);\n  }\n  append(node: ts.Node, text: string): void {\n    this._sourceString.appendLeft(node.getEnd(), text);\n  }\n\n  prependBefore(node: ts.Node, text: string) {\n    this._sourceString.appendLeft(node.getStart(), text);\n  }\n\n  insertImport(symbolName: string, modulePath: string): void {\n    // Find all imports.\n    const allImports = this.findAstNodes(this._sourceFile, ts.SyntaxKind.ImportDeclaration);\n    const maybeImports = allImports\n      .filter((node: ts.ImportDeclaration) => {\n        // Filter all imports that do not match the modulePath.\n        return node.moduleSpecifier.kind == ts.SyntaxKind.StringLiteral\n          && (node.moduleSpecifier as ts.StringLiteral).text == modulePath;\n      })\n      .filter((node: ts.ImportDeclaration) => {\n        // Remove import statements that are either `import 'XYZ'` or `import * as X from 'XYZ'`.\n        const clause = node.importClause as ts.ImportClause;\n        if (!clause || clause.name || !clause.namedBindings) {\n          return false;\n        }\n        return clause.namedBindings.kind == ts.SyntaxKind.NamedImports;\n      })\n      .map((node: ts.ImportDeclaration) => {\n        // Return the `{ ... }` list of the named import.\n        return (node.importClause as ts.ImportClause).namedBindings as ts.NamedImports;\n      });\n\n    if (maybeImports.length) {\n      // There's an `import {A, B, C} from 'modulePath'`.\n      // Find if it's in either imports. If so, just return; nothing to do.\n      const hasImportAlready = maybeImports.some((node: ts.NamedImports) => {\n        return node.elements.some((element: ts.ImportSpecifier) => {\n          return element.name.text == symbolName;\n        });\n      });\n      if (hasImportAlready) {\n        return;\n      }\n      // Just pick the first one and insert at the end of its identifier list.\n      this.appendAfter(maybeImports[0].elements[maybeImports[0].elements.length - 1],\n        `, ${symbolName}`);\n    } else {\n      // Find the last import and insert after.\n      this.appendAfter(allImports[allImports.length - 1],\n        `import {${symbolName}} from '${modulePath}';`);\n    }\n  }\n\n  removeNode(node: ts.Node) {\n    this._sourceString.remove(node.getStart(this._sourceFile), node.getEnd());\n    this._changed = true;\n  }\n\n  removeNodes(...nodes: ts.Node[]) {\n    nodes.forEach(node => node && this.removeNode(node));\n  }\n\n  replaceNode(node: ts.Node, replacement: string) {\n    let replaceSymbolName: boolean = node.kind === ts.SyntaxKind.Identifier;\n    this._sourceString.overwrite(node.getStart(this._sourceFile),\n      node.getEnd(),\n      replacement,\n      { storeName: replaceSymbolName });\n    this._changed = true;\n  }\n\n  sourceMatch(re: RegExp) {\n    return this._sourceText.match(re) !== null;\n  }\n\n  transpile(compilerOptions: ts.CompilerOptions): TranspileOutput {\n    const source = this.sourceText;\n    const result = ts.transpileModule(source, {\n      compilerOptions: Object.assign({}, compilerOptions, {\n        sourceMap: true,\n        inlineSources: false,\n        inlineSourceMap: false,\n        sourceRoot: ''\n      }),\n      fileName: this._fileName\n    });\n\n    if (result.sourceMapText) {\n      const sourceMapJson = JSON.parse(result.sourceMapText);\n      sourceMapJson.sources = [ this._fileName ];\n\n      const consumer = new SourceMapConsumer(sourceMapJson);\n      const map = SourceMapGenerator.fromSourceMap(consumer);\n      if (this._changed) {\n        const sourceMap = this._sourceString.generateMap({\n          file: path.basename(this._fileName.replace(/\\.ts$/, '.js')),\n          source: this._fileName,\n          hires: true,\n        });\n        map.applySourceMap(new SourceMapConsumer(sourceMap), this._fileName);\n      }\n\n      const sourceMap = map.toJSON();\n      const fileName = process.platform.startsWith('win')\n        ? this._fileName.replace(/\\//g, '\\\\')\n        : this._fileName;\n      sourceMap.sources = [ fileName ];\n      sourceMap.file = path.basename(fileName, '.ts') + '.js';\n      sourceMap.sourcesContent = [ this._sourceText ];\n\n      return { outputText: result.outputText, sourceMap };\n    } else {\n      return {\n        outputText: result.outputText,\n        sourceMap: null\n      };\n    }\n  }\n}"]}