{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../../src/aot-clean-transformer/loader/transformer-based-loader/loader.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as ts from 'typescript';\nimport { loader as l } from 'webpack';\nconst loaderUtils = require('loader-utils');\n\nimport { aotCleanupTransformer } from '../../index';\nimport { findPlugin } from '../../../webpack-wrapper';\n\nlet AOTMode: boolean;\nlet compilerOptions: ts.CompilerOptions;\n\nexport interface AotCleanupLoaderOptions {\n  /**\n   * If false the plugin is a ghost, it will not perform any action.\n   * This property can be used to trigger AOT on/off depending on your build target (prod, staging etc...)\n   *\n   * The state can not change after initializing the plugin.\n   * @default true\n   */\n  disable?: false;\n\n  /**\n   * A path to a TSConfig file, optional if a plugin is supplied.\n   * When both are available `tsConfigPath` wins.\n   */\n  tsConfigPath?: any;\n\n  /**\n   * Optional TS compiler options.\n   *\n   * > Some options set by the loader can not change.\n   */\n  compilerOptions?: any;\n}\n\nfunction init(this: l.LoaderContext & { _compilation: any }): void {\n  const plugin = findPlugin(this._compilation);\n  const options: AotCleanupLoaderOptions = loaderUtils.getOptions(this) || {};\n\n  if (options.disable === false) {\n    AOTMode = true;\n  } else {\n    AOTMode = false;\n  }\n\n  let tsConfigPath: string = options.tsConfigPath;\n\n  if (!tsConfigPath && plugin) {\n    tsConfigPath = plugin.options.tsConfig;\n  }\n\n  if (tsConfigPath === undefined) {\n    throw new Error('aot-transformer is being used as a loader but no `tsConfigPath` option nor '\n      + 'NgcWebpackPlugin was detected. You must provide at least one of these.'\n    );\n  }\n\n  const tsConfig = ts.readConfigFile(tsConfigPath, ts.sys.readFile);\n  if (tsConfig.error) {\n    throw tsConfig.error;\n  }\n\n  for (const key of Object.keys(options)) {\n    if (key == 'tsConfigPath') {\n      continue;\n    }\n    tsConfig.config.compilerOptions[key] = options[key];\n  }\n\n  tsConfig.config.compilerOptions.strictNullChecks = false;\n  tsConfig.config.compilerOptions.declaration = false;\n  tsConfig.config.compilerOptions.diagnostics = false;\n  tsConfig.config.compilerOptions.noEmit = true;\n  tsConfig.config.compilerOptions.skipLibCheck = true;\n\n  const parsedConfig = ts.parseJsonConfigFileContent(tsConfig.config, ts.sys, Path.dirname(tsConfigPath));\n  compilerOptions = parsedConfig.options;\n}\n\nexport function aotCleanLoader(this: l.LoaderContext & { _compilation: any }, source: string | null, sourceMap: string | null) {\n  const cb = this.async();\n  const sourceFileName: string = this.resourcePath;\n\n  if (AOTMode === false || sourceFileName.endsWith('ngfactory.ts')) {\n    return cb(null, source, sourceMap);\n  } else if (AOTMode !== true) {\n    init.call(this);\n    if (AOTMode === false) {\n      return cb(null, source, sourceMap);\n    }\n  }\n\n  const sourceFile = ts.createSourceFile(sourceFileName, source, ts.ScriptTarget.Latest, true, ts.ScriptKind.TS);\n  const transformResults: ts.TransformationResult<ts.SourceFile> = ts.transform(sourceFile, [aotCleanupTransformer], compilerOptions);\n\n  if (transformResults.diagnostics && transformResults.diagnostics.length >= 1) {\n    const errors = diagnosticsToErrors(transformResults.diagnostics);\n    if (errors.length === 1) {\n      cb(errors[0]);\n    } else {\n      for (let e of errors) {\n        this.emitError(e.message);\n        cb(new Error('NgcWebpack AotCleanupLoader: Multiple Errors'));\n      }\n    }\n  } else {\n    try {\n      const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });\n      const result = printer.printFile(transformResults.transformed[0]);\n      cb(null, result);\n    } catch (err) {\n      cb(err);\n    }\n  }\n}\n\nfunction diagnosticsToErrors(diagnostics: ts.Diagnostic[]): Error[] {\n  const errors: Error[] = [];\n  diagnostics.forEach( d => {\n    const msg = d.messageText;\n    if (typeof msg === 'string') {\n      errors.push(new Error(msg));\n    } else {\n      let chain: ts.DiagnosticMessageChain = <any>d;\n      while (chain) {\n        if (chain.category = ts.DiagnosticCategory.Error) {\n          errors.push(new Error(chain.messageText));\n        }\n        chain = chain.next;\n      }\n    }\n  });\n  return errors;\n}"]}