{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/aot-clean-transformer/utils.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAEjC,gCAAuC,IAA0B,EAAE,WAA0B;IAC3F,IAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC;IAChC,IAAI,UAAU,GAAkB,IAAI,CAAC;IACrC,MAAM,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;QAChB,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa;YAC9B,UAAU,GAAI,EAAuB,CAAC,IAAI,CAAC;YAC3C,KAAK,CAAC;QACR;YACE,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAED,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3B,yDAAyD;YACzD,MAAM,CAAC,EAAE,CAAC;QACZ,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC;YAC3C,IAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;YAC3C,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC7C,sEAAsE;gBACtE,MAAM,CAAC,CAAE,EAAyB,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;YACtD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,mDAAmD;gBACnD,IAAM,YAAY,GAAG,EAAqB,CAAC;gBAE3C,MAAM,CAAC,YAAY,CAAC,QAAQ;qBACzB,GAAG,CAAC,UAAC,EAAsB,IAAK,OAAA,EAAE,CAAC,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,EAArD,CAAqD,CAAC,CAAC;YAC5F,CAAC;QACH,CAAC;IACH,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,uDAAuD;QACvD,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AApCD,wDAoCC;AAED;;;;;;;GAOG;AACH,yBAAmD,IAAa,EAAE,IAAO;IACvE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACnE,MAAM,CAAM,IAAI,CAAC;IACnB,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAChF,GAAG,CAAC,CAAc,UAAsC,EAAtC,KAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAtC,cAAsC,EAAtC,IAAsC;YAAnD,IAAI,KAAK,SAAA;YACZ,IAAM,MAAM,GAAG,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;SACF;IACH,CAAC;AACH,CAAC;AAXD,0CAWC","sourcesContent":["import * as ts from 'typescript';\n\nexport function angularImportsFromNode(node: ts.ImportDeclaration, _sourceFile: ts.SourceFile): string[] {\n  const ms = node.moduleSpecifier;\n  let modulePath: string | null = null;\n  switch (ms.kind) {\n    case ts.SyntaxKind.StringLiteral:\n      modulePath = (ms as ts.StringLiteral).text;\n      break;\n    default:\n      return [];\n  }\n\n  if (!modulePath.startsWith('@angular/')) {\n    return [];\n  }\n\n  if (node.importClause) {\n    if (node.importClause.name) {\n      // This is of the form `import Name from 'path'`. Ignore.\n      return [];\n    } else if (node.importClause.namedBindings) {\n      const nb = node.importClause.namedBindings;\n      if (nb.kind == ts.SyntaxKind.NamespaceImport) {\n        // This is of the form `import * as name from 'path'`. Return `name.`.\n        return [(nb as ts.NamespaceImport).name.text + '.'];\n      } else {\n        // This is of the form `import {a,b,c} from 'path'`\n        const namedImports = nb as ts.NamedImports;\n\n        return namedImports.elements\n          .map((is: ts.ImportSpecifier) => is.propertyName ? is.propertyName.text : is.name.text);\n      }\n    }\n  } else {\n    // This is of the form `import 'path';`. Nothing to do.\n    return [];\n  }\n}\n\n/**\n * Find the matching twin node for a node where both root and node have a twin SourceFile.\n * Twin SourceFiles are 2 instances of a the same source file.\n *\n * @param root\n * @param node\n * @return {any}\n */\nexport function findRemoteMatch<T extends ts.Node>(root: ts.Node, node: T): T | undefined {\n  if (root.kind === node.kind && root.getStart() === node.getStart()) {\n    return <any>root;\n  } else if (node.getStart() >= root.getStart() && node.getEnd() <= root.getEnd()) {\n    for (let child of root.getChildren(root.getSourceFile())) {\n      const result = findRemoteMatch(child, node);\n      if (result) {\n        return result;\n      }\n    }\n  }\n}"]}