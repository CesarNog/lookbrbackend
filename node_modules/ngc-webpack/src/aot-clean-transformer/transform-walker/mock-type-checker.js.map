{"version":3,"file":"mock-type-checker.js","sourceRoot":"","sources":["../../../../src/aot-clean-transformer/transform-walker/mock-type-checker.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\n\nexport class MockTypeChecker {\n\n  services: ts.LanguageService;\n\n  get program(): ts.Program {\n    return this.services.getProgram();\n  }\n\n  private files: ts.MapLike<{ version: number }> = {};\n  private virtFileSystem: {[name: string]: string } = {};\n  private servicesHost: ts.LanguageServiceHost;\n\n  constructor(public options: ts.CompilerOptions, virtFiles?: {[name: string]: string }) {\n    if (virtFiles) {\n      Object.keys(virtFiles).forEach(fileName => this.addVirtFile(fileName, virtFiles[fileName]));\n    }\n\n    this.init();\n  }\n\n  hasFile(fileName: string): boolean {\n    return this.files.hasOwnProperty(fileName);\n  }\n\n  addFile(fileName: string) {\n    if (this.files.hasOwnProperty(fileName)) {\n      this.files[fileName].version++;\n    } else {\n      this.files[fileName] = { version: 0 };\n    }\n  }\n\n  addVirtFile(fileName: string, content: string) {\n    this.virtFileSystem[fileName] = content;\n    this.addFile(fileName);\n  }\n\n  getDiagnostics(fileName: string): ts.Diagnostic[] {\n    return this.services.getCompilerOptionsDiagnostics()\n      .concat(this.services.getSyntacticDiagnostics(fileName))\n      .concat(this.services.getSemanticDiagnostics(fileName));\n  }\n\n  getSourceFile(fileName: string): ts.SourceFile {\n    return this.program.getSourceFile(fileName);\n  }\n\n  private init(): void {\n    this.servicesHost = {\n      getScriptFileNames: () => Object.keys(this.files),\n      getScriptVersion: (fileName) => this.files[fileName] && this.files[fileName].version.toString(),\n      getScriptSnapshot: (fileName) => {\n        if (!this.servicesHost.fileExists(fileName)) {\n          return undefined;\n        }\n\n        return ts.ScriptSnapshot.fromString(this.servicesHost.readFile(fileName).toString());\n      },\n      getCurrentDirectory: () => ts.sys.getCurrentDirectory(),\n      getCompilationSettings: () => this.options,\n      getDefaultLibFileName: (options) => ts.getDefaultLibFilePath(options),\n      fileExists: (fileName: string) => this.virtFileSystem.hasOwnProperty(fileName) || ts.sys.fileExists(fileName),\n      readFile: (fileName: string) => this.virtFileSystem.hasOwnProperty(fileName) ? this.virtFileSystem[fileName] : ts.sys.readFile(fileName) ,\n      readDirectory: ts.sys.readDirectory,\n    };\n\n    this.services = ts.createLanguageService(this.servicesHost, ts.createDocumentRegistry());\n\n\n  }\n}\n\n// export class MockTypeChecker {\n//\n//   public program: ts.Program;\n//\n//   private virtFileSystem: {[name: string]: string };\n//   private host: ts.CompilerHost;\n//\n//   constructor(public options: ts.CompilerOptions, virtFiles?: {[name: string]: string }) {\n//     this.virtFileSystem = virtFiles\n//       ? Object.assign({}, virtFiles)\n//       : {}\n//     ;\n//     this.init();\n//   }\n//\n//   hasFile(fileName: string): boolean {\n//     return this.virtFileSystem.hasOwnProperty(fileName);\n//   }\n//\n//   addFile(name: string, content: string) {\n//     this.virtFileSystem[name] = content;\n//     if (this.program) {\n//       this.program = ts.createProgram([name], this.options, this.host, this.program);\n//       this.program.emit(this.program.getSourceFile(name));\n//     }\n//   }\n//\n//   private init(): void {\n//     const _host: ts.CompilerHost = ts.createCompilerHost(this.options);\n//     this.host = Object.create(_host, {\n//       writeFile: { value: (fileName, content) => {} },\n//       getSourceFile: { value: (fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) => {\n//         if (this.virtFileSystem.hasOwnProperty(fileName)) {\n//           const sourceText = this.virtFileSystem[fileName];\n//           return sourceText !== undefined\n//             ? ts.createSourceFile(fileName, sourceText, languageVersion)\n//             : undefined\n//             ;\n//         } else {\n//           return _host.getSourceFile(fileName, languageVersion, onError);\n//         }\n//       }},\n//       getSourceFileByPath: { value: (fileName: string, path: ts.Path, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) => {\n//         return _host.getSourceFileByPath(fileName, path, languageVersion, onError);\n//       } },\n//       fileExists: { value: (fileName: string) => this.virtFileSystem.hasOwnProperty(fileName) || _host.fileExists(fileName) },\n//       readFile: { value: (fileName: string) => this.virtFileSystem.hasOwnProperty(fileName) ? this.virtFileSystem[fileName] : _host.readFile(fileName) }\n//     });\n//\n//     this.program = ts.createProgram(Object.keys(this.virtFileSystem), this.options, this.host);\n//   }\n// }\n\n"]}